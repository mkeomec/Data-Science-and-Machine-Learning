colMeans(PSD_data[,2:ncol(PSD_data)])
log10(colMeans(PSD_data[,2:ncol(PSD_data)]))
plot(log10(colMeans(PSD_data[,2:ncol(PSD_data)])))
plot(log10(colMeans(PSD_data[,2:120)])))
plot(log10(colMeans(PSD_data[,2:120])))
f=[1:.25:500]
f=c(1:.25:500)
f=seq(from=1,to=500,by=.25)
f=seq(from=0,to=500,by=.25)
plot(f[2:120],log10(colMeans(PSD_data[,2:120])))
f[2:120]
plot(f[2:120],log10(colMeans(PSD_data[,2:120])))
View(PSD_data)
plot(f[2:120, log10(PSD_data[48,2:120]))
plot(f[2:120], log10(PSD_data[48,2:120]))
plot(f[2:120], log10(PSD_data[18,2:120]))
plot(f[2:120], log10(PSD_data[34,2:120]))
plot(f[2:120], log10(PSD_data[33,2:120]))
plot(f[2:120], log10(PSD_data[10,2:120]))
plot(f[2:120], log10(PSD_data[1,2:120]))
plot(f[2:120], log10(PSD_data[48,2:120]))
plot(f[2:120], log10(PSD_data[55,2:120]))
plot(f[2:120], log10(PSD_data[57,2:120]))
plot(f[2:120], log10(PSD_data[61,2:120]))
plot(f[2:120], log10(PSD_data[63,2:120]))
plot(f[2:120],log10(colMeans(PSD_data[,2:120])))
plot(f[2:120],log10(colMeans(PSD_data[c(31,10,9,18,34,33),2:120])))
plot(f[2:120],log10(colMeans(PSD_data[c(48,55,57,61,62,63),2:120])))
plot(f[2:120],log10(colMeans(PSD_data[,2:120])))
f[7.5]
f[7]
f['7.5']
f[7.5]
f[35]
f[30]
f[31]
f[60]
f[61]
f[50]
f[51]
log10(colMeans(PSD_data[c(31,10,9,18,34,33),2:120]))
log_PSD <- log10(colMeans(PSD_data[c(31,10,9,18,34,33),2:120]))
log_PSD[c(31:51)]
max(log_PSD[c(31:51)])
min(log_PSD[c(31:51)])
max(log_PSD[c(31:51)])-min(log_PSD[c(31:51)])
plot(f[2:120],log10(colMeans(PSD_data[c(31,10,9,18,34,33),2:120])))
library(car)
colMeans(PSD_data[c(31:51)])
log10(colMeans(PSD_data[c(31:51)]))
log_PSD[c(31:51)]
PSD_data <- read.csv(file.choose(), header=TRUE)
log_PSD <- log10(colMeans(PSD_data[c(31,10,9,18,34,33),2:120]))
plot(f[2:120],log10(colMeans(PSD_data[c(31,10,9,18,34,33),2:120])))
max(log_PSD[c(31:51)])-min(log_PSD[c(31:51)])
state.x77
DNase
data()
summary(state.x77)
days <- c('Mon','Tues','Wed','Thur','Fri')
temp <- c(22.2,21,23,24.3,25)
rain <- c(T,T,F,F,T)
df <- data.frame(days,temp,rain)
df
str(df)
summary(df)
df[1,]
df[,1]
df[,'rain']
df[1:5,c('days','temp')]
df$days
df['days']
subset(df,subset=rain==TRUE)
subset(df,subset=temp>23)
sorted.temp <- order(df['temp'])
sorted.temp
df[sorted.temp]
df[sorted.temp,]
desc.temp <- order(-df['temp'])
dr[desc.temp,]
df[desc.temp,]
desc.temp <- order(-df$temp)
-df$temp
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dataset <- read.csv("C:/Users/cwbishop/Downloads/homework_data_set.csv")
nleads <- nrow(dataset)
dataset <- read.csv("C:/Users/cwbishop/Documents/Github/Indeed/homework_data_set.csv")
nleads <- nrow(dataset)
table(dataset$assigned)
dataset$revenue[is.na(dataset$revenue)]=0
avg_revenue <- as.numeric(aggregate(revenue~assigned,dataset,FUN=mean)[2][,1])
names(avg_revenue) <- c("Unassigned","Assigned")
barplot(avg_revenue,main="Average Revenue by assignment", xlab="Assignment", ylab="$ dollars")
data_assigned <- dataset[dataset$assigned==1,]
data_unassigned <- dataset[dataset$assigned==0,]
getOption(repos)
getOptions(repos)
getOptions("repos"")
getOptions("repos")
getOption("repos")
install.packages("rmarkdown")
dataset <- read.csv("C:/Users/cwbishop/Documents/Github/Indeed/homework_data_set.csv")
names(dataset)
nleads <- nrow(dataset)
hist(dataset$date_assignment_starts)
hist(as.Numeric(dataset$date_assignment_starts))
hist(as.numeric(dataset$date_assignment_starts))
hist(as.numeric(dataset$first_revenue_date))
data_assigned <- dataset[dataset$assigned==1,]
data_unassigned <- dataset[dataset$assigned==0,]
hist(as.numeric(data_assigned$date_assignment_starts))
hist(as.numeric(data_unassigned$date_assignment_startsfirst_revenue_date))
hist(as.numeric(data_unassigned$date_assignment_startsfirst_revenue_date))
hist(as.numeric(data_assigned$date_assignment_startsfirst_revenue_date))
hist(as.numeric(data_unassigned$first_revenue_date))
hist(as.numeric(data_assigned$first_revenue_date))
hist(as.numeric(data_unassigned$first_revenue_date),ylim=c(0,1000))
hist(as.numeric(data_assigned$first_revenue_date),ylim=c(0,1000))
View(dataset)
nleads
table(dataset$assigned)
names(table(dataset$assigned))
names(nleads_assign <- c("Not assigned","Assigned"))
nleads_assign <- table(dataset$assigned)
names(nleads_assign <- c("Not assigned","Assigned"))
nleads_assign
nleads_assign <- table(dataset$assigned)
nleads_assign
knitr::opts_chunk$set(echo = TRUE)
names(nleads_assign <- c("Not assigned","Assigned"))
nleads_assign <- table(dataset$assigned)
names(nleads_assign <- c("Not assigned","Assigned"))
nleads_assign <- table(dataset$assigned)
names(nleads_assign) <- c("Not assigned","Assigned")
print(nleads_assign)
hist(as.numeric(data_assigned$date_assignment_ends))
hist(as.numeric(data_unassigned$date_assignment_ends))
hist(as.numeric(data_assigned$advertiser_id))
hist(as.numeric(data_unassigned$advertiser_id))
hist(as.numeric(data_assigned$age))
hist(as.numeric(data_unassigned$age))
data_assigned <- data_assigned[order(data_assigned$age),]
data_unassigned <- data_unassigned[order(data_unassigned$age),]
data_assigned$rev_cumsum <- cumsum(data_assigned$revenue)
data_unassigned$rev_cumsum <- cumsum(data_unassigned$revenue)
dataset <- dataset[order(dataset$age),]
dataset$rev_cumsum <- cumsum(dataset$revenue)
plot(dataset$age,dataset$rev_cumsum)
plot(dataset$age,dataset$rev_cumsum)
dataset$rev_cumsum <- cumsum(dataset$revenue)
plot(dataset$age,dataset$rev_cumsum)
dataset <- read.csv("C:/Users/cwbishop/Documents/Github/Indeed/homework_data_set.csv")
names(dataset)
#Number of leads is equal to number of rows in dataset
nleads <- nrow(dataset)
#Count number of leads in assigned and unassigned populations
table(dataset$assigned)
#Convert "NA" value in revenue to zero for upcoming analyses
dataset$revenue[is.na(dataset$revenue)]=0
#Avg of revenue by assigned group
avg_revenue <- as.numeric(aggregate(revenue~assigned,dataset,FUN=mean)[2][,1])
names(avg_revenue) <- c("Unassigned","Assigned")
barplot(avg_revenue,main="Average Revenue by assignment", xlab="Assignment", ylab="$ dollars")
#Subset by assignment
data_assigned <- dataset[dataset$assigned==1,]
data_unassigned <- dataset[dataset$assigned==0,]
#Calculate cumulative sums of revenue for subsets
data_assigned <- data_assigned[order(data_assigned$age),]
data_unassigned <- data_unassigned[order(data_unassigned$age),]
data_assigned$rev_cumsum <- cumsum(data_assigned$revenue)
data_unassigned$rev_cumsum <- cumsum(data_unassigned$revenue)
dataset <- dataset[order(dataset$age),]
dataset$rev_cumsum <- cumsum(dataset$revenue)
##Assess relationship between age and revenue
plot(dataset$age,dataset$rev_cumsum)
knitr::opts_chunk$set(echo = TRUE)
plot(dataset$age,dataset$rev_cumsum, main="Cumulutive revenue by age of account",ylab="Cumulative Revenue", xlab="Age (days)")
dataset <- read.csv("C:/Users/cwbishop/Documents/Github/Indeed/homework_data_set.csv")
names(dataset)
nleads <- nrow(dataset)
table(dataset$assigned)
dataset$revenue[is.na(dataset$revenue)]=0
avg_revenue <- as.numeric(aggregate(revenue~assigned,dataset,FUN=mean)[2][,1])
names(avg_revenue) <- c("Unassigned","Assigned")
barplot(avg_revenue,main="Average Revenue by assignment", xlab="Assignment", ylab="$ dollars")
data_assigned <- dataset[dataset$assigned==1,]
data_unassigned <- dataset[dataset$assigned==0,]
hist(as.numeric(data_assigned$date_assignment_starts))
hist(as.numeric(data_unassigned$first_revenue_date),ylim=c(0,1000))
hist(as.numeric(data_assigned$first_revenue_date),ylim=c(0,1000))
hist(as.numeric(data_assigned$date_assignment_ends))
hist(as.numeric(data_unassigned$date_assignment_ends))
hist(as.numeric(data_assigned$advertiser_id))
hist(as.numeric(data_unassigned$advertiser_id))
hist(as.numeric(data_assigned$age))
hist(as.numeric(data_unassigned$age))
data_assigned <- data_assigned[order(data_assigned$age),]
data_unassigned <- data_unassigned[order(data_unassigned$age),]
data_assigned$rev_cumsum <- cumsum(data_assigned$revenue)
data_unassigned$rev_cumsum <- cumsum(data_unassigned$revenue)
dataset <- dataset[order(dataset$age),]
dataset$rev_cumsum <- cumsum(dataset$revenue)
plot(dataset$age,dataset$rev_cumsum)
plot(data_unassigned$age,data_unassigned$revenue)
plot(data_unassigned$age,data_unassigned$revenue,ylim=c(0,600000000),xlim=c(0,1500))
plot(data_unassigned$age,data_unassigned$rev_cumsum)
plot(data_assigned$age,data_assigned$revenue)
plot(data_assigned$age,data_assigned$revenue,ylim=c(10000000,3000000000))
plot(data_assigned$age,data_assigned$rev_cumsum)
dataset <- dataset[order(dataset$first_revenue_date),]
dataset$rev_cumsum <- cumsum(dataset$revenue)
plot(dataset$first_revenue_date,dataset$revenue)
plot(dataset$first_revenue_date,dataset$rev_cumsum)
data_unassigned <- data_unassigned[order(data_unassigned$first_revenue_date),]
data_unassigned$rev_cumsum <- cumsum(data_unassigned$revenue)
plot(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum)
data_assigned <- data_assigned[order(data_assigned$first_revenue_date),]
data_assigned$rev_cumsum <- cumsum(data_assigned$revenue)
plot(dataset$first_revenue_date,dataset$rev_cumsum)
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
plot(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum)
dataset <- read.csv("C:/Users/cwbishop/Documents/Github/Indeed/homework_data_set.csv")
names(dataset)
nleads <- nrow(dataset)
table(dataset$assigned)
dataset$revenue[is.na(dataset$revenue)]=0
avg_revenue <- as.numeric(aggregate(revenue~assigned,dataset,FUN=mean)[2][,1])
names(avg_revenue) <- c("Unassigned","Assigned")
barplot(avg_revenue,main="Average Revenue by assignment", xlab="Assignment", ylab="$ dollars")
data_assigned <- dataset[dataset$assigned==1,]
data_unassigned <- dataset[dataset$assigned==0,]
data_assigned <- data_assigned[order(data_assigned$age),]
data_unassigned <- data_unassigned[order(data_unassigned$age),]
data_assigned$rev_cumsum <- cumsum(data_assigned$revenue)
data_unassigned$rev_cumsum <- cumsum(data_unassigned$revenue)
dataset <- dataset[order(dataset$age),]
dataset$rev_cumsum <- cumsum(dataset$revenue)
dataset <- dataset[order(dataset$first_revenue_date),]
dataset$rev_cumsum <- cumsum(dataset$revenue)
data_unassigned <- data_unassigned[order(data_unassigned$first_revenue_date),]
data_unassigned$rev_cumsum <- cumsum(data_unassigned$revenue)
data_assigned <- data_assigned[order(data_assigned$first_revenue_date),]
data_assigned$rev_cumsum <- cumsum(data_assigned$revenue)
plot(dataset$first_revenue_date,dataset$rev_cumsum)
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"))
lwd=c(2.5,2.5,col=c("black","blue","red"))
lwd=c(2.5,2.5,2.5,col=c("black","blue","red"))
lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("black","blue","red"))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue")lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("black","blue","red")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("black","blue","red")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("blue","red")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("blue","red")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("blue","red","yellow")))
plot(dataset$first_revenue_date,dataset$rev_cumsum)
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("blue","red","yellow")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5),col=c("blue","red","yellow"))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5),col=c("black",blue","red"))
#Use linear regression model to assess added revenue by assigning lead
rev_mod <- lm(dataset$revenue~dataset$assigned)
summary(rev_mod)
all_mod <- lm(dataset$revenue~dataset$advertiser_id+dataset$assigned+as.integer(dataset$date_assignment_starts)+as.integer(dataset$date_assignment_ends)+as.integer(dataset$first_revenue_date)+as.integer(dataset$date_created)+dataset$age+dataset$assign_days)
summary(all_mod)
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
knitr::opts_chunk$set(echo = TRUE)
plot(dataset$first_revenue_date,dataset$rev_cumsum, main="Cumulative revenue by first revenue date")
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"),lty=c(1,1),lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
plot(dataset$first_revenue_date,dataset$rev_cumsum)
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"),lty=c(1,1),lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"),lty=c(1,1),lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"), lty=c(1,1), lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
plot(dataset$first_revenue_date,dataset$rev_cumsum, main="Cumulative revenue by first revenue date",xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"), lty=c(1,1), lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
strptime("11:02:03")
strptime("11:02:03",format="%H:%M:%S")
strptime("January 8, 2017",format"$M,$D,$Y")
strptime("09-08-2017",format"$M,$D,$Y")
strptime("09-08-2017",format=("$M,$D,$Y")
strptime("09-08-2017",format="$M,$D,$Y")
strptime("11:02:03",format="%H:%M:%S")
strptime("09-08-2017",format="$M:$D:$Y")
strptime("09-08-2017",format="$m:$D:$Y")
strptime("09-08-2017",format="$m:$d:$y")
install.packages('dplyr')
install.packages("nycflights13")
library(dplyr)
library(nycflights13)
flights
head(flights)
summary(flights)
help("dplyr")
head(filter(flights,month==11,day==3,carrier=='AA)')
head(filter(flights,month==11,day==3,carrier=='AA)'))
head(filter(flights,month==11,day==3,carrier=='AA'))
slice(flights,1:10)
head(arrange(flights,year,month,day,airtime))
head(arrange(flights,year,month,day,air_time))
head(arrange(flights,year,month,day,arr_time))
head(arrange(flights,year,month,day,desc(arr_time)))
head(select(flights,carrier))
head(select(flights,carrier,arr_time))
select(flights,carrier,arr_time))
select(flights,carrier,arr_time)
head(rename(flights,airline_carrier=carrier))
distinct(select(flights,carriers))
distinct(select(flights,carrier))
mutate(flights,new_col= arr_delay-dep_delay)
transmute(flights,new_col= arr_delay-dep_delay)
summarise(flights,avg_airtime=mean)
summarise(flights,avg_airtime=mean(air_time,na.rm=TRUE))
mean(air_time,na.rm=TRUE))
mean(flights$air_time,na.rm=TRUE))
mean(flights$air_time,na.rm=TRUE)
summarise(flights,total_airtime=sum(air_time,na.rm=TRUE))
sample_n(flights,10)
sample_frac(flights,0.1)
df <- mtcars
result <- arrange(sample_n(filter(df,mpg>20),size=5),desc(mpg))
result
a <- filter(df,mpg>20)
b <- sample_n(a,size=5)
results <- arrange(b,desc(mpg))
result <- df %/% filter(mpg>20) %/% sample_n(size=5) %/% arrange(desc(mpg))
result <- df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
library(ggplot2)
setwd("C:/Users/cwbishop/Documents/GitHub/DataScienceandMachineLearning/Data-Science-and-Machine-Learning-Bootcamp")
train <- read.csv('train.csv')
test<- read.csv('test.csv')
bike <- train
head(bike)
temp_count_plot <- ggplot(data=bike,aes(x=temp,y=count))
temp_count_plot + geom_point(aes(color=temp),alpha=0.3)
bike$datetime <- as.POSIXct(bike$datetime)
date_count_plot <- ggplot(data=bike,aes(x=datetime,y=count))
date_count_plot + geom_point(aes(color=temp),alpha=0.3)
train <- read.csv('train.csv')
test<- read.csv('test.csv')
bike <- train
cor.test(bike$temp,bike$count)
cor(bike$temp,bike$count)
cor(bike$temp,bike$count)
cor.data <- cor(bike$temp,bike$count)
cor.data
cor.data <- cor(bike[temp,count])
cor.data <- cor(bike['temp','count'])
cor.data <- cor(bike[,c('temp','count'])
cor.data
corrplot(temp,count)
cor.data <- cor(bike[,c('temp','count'])
cor.data
corrplot(temp,count)
cor.data <- cor(bike[,c('temp','count']))
bike[,c('temp','count'])
bike[,c('temp','count')]
cor.data <- cor(bike[,c('temp','count')])
cor.data
View(bike)
pl <- ggplot(bike, aes(factor(season), count))
pl + geom_boxplot()
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl + geom_boxplot(fill='white',color=c('red','green','blue','purple'))
pl + geom_boxplot(fill='green',color=c('red','green','blue','purple'))
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl <- ggplot(bike, aes(factor(season), count,fill=group))
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl <- ggplot(bike, aes(factor(season), count,fill=season))
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl <- ggplot(bike, aes(factor(season), count,fill=factor(season))
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl <- ggplot(bike, aes(factor(season), count,fill=factor(season)))
pl + geom_boxplot(color=c('red','green','blue','purple'))
bike$datetime
bike$datetime[4]
bike$datetime[,4]
bike$datetime[4]
bike$datetime
format(time.stamp, "%H")
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
bike <- train
bike$datetime[4]
View(bike)
class(bike$datetime)
bike$datetime[4]
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H")
hour
bike$datetime <- as.POSIXct(bike$datetime)
hour = format(as.POSIXct(Time,format="%H:%M:%S"),"%H")
hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H")
hour
View(bike)
hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H:%M")
hour
hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H")
hour
bike$hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H")
p2 <- ggplot(data=bike,aes(x=hour,y=count))
p2+geom_point(aes(color=temp))
p2+geom_point(aes(color=temp) + scale_colour_gradient(high='red',low = "blue"))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) scale_fill_distiller(palette = "Spectral")
p2+geom_point(aes(color=temp)) +scale_fill_distiller(palette = "Spectral")
+ scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "white")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
library(dplyr)
subset(bike,workingday==0)
not_work_day <- subset(bike,workingday==0)
p2 <- ggplot(data=not_work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
work_day <- subset(bike,workingday==1)
p2 <- ggplot(data=work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(colors=c('red','orange','yellow','green','purple','blue')
not_work_day <- subset(bike,workingday==0)
p2 <- ggplot(data=not_work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(colors=c('red','orange','yellow','green','purple','blue'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('red','orange','yellow','green','purple','blue'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('blue','purple','green','yellow','orange','red'))
work_day <- subset(bike,workingday==1)
p2 <- ggplot(data=work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('blue','purple','green','yellow','orange','red'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('purple','blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c(blue','green','yellow','orange','red'))
not_work_day <- subset(bike,workingday==0)
p2 <- ggplot(data=not_work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp)+position=position_jitter(w=1, h=0)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp),position=position_jitter(w=1, h=0)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp),position=position_jitter(w=1, h=0)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
p2 <- ggplot(data=work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp),position=position_jitter(w=1, h=0)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
temp.model <- lm(count~temp,data=bike)
summary(temp.model)
temp.model
temp.model.coefficient
temp.model[2]
temp.model[1]
temp.model[1]['temp']
temp.model[1][2]
temp.model[1][1]
class(temp.model[1])
temp.model[1]{1}
temp.model{1}
temp.model[[1][1]
temp.model[[1]][1]
temp.model[[1]][2]
temp.model[[1]][2]*25+temp.model[[1]][1]
bike_25 <- temp.model[[1]][2]*25+temp.model[[1]][1]
bike_25
predict(temp.model,25)
predict(temp.model,newdata=25)
predict(temp.model,newdata=as.data.frame(25)
predict(temp.model,newdata=as.data.frame(25))
?predict
predict(temp.model,newdata=data.frame(25))
predict(temp.model,data.frame(25))
predict(temp.model,data.frame(c(25)))
predict(temp.model,data.frame(c(25,1)))
predict(temp.model, data.frame(train_x = c(1, 2, 3)))
temp.model <- lm(count~temp,data=bike)
predict(temp.model, data.frame(train_x = c(1, 2, 3)))
summary(temp.model)
bike_25 <- temp.model[[1]][2]*25+temp.model[[1]][1]
predict(temp.model,data.frame(c(25,1)))
predict(temp.model, data.frame(train_x = c(1, 2, 3)))
mod <- temp.model
predict(mod,data.frame(c(25,1)))
data.frame(c(25,1))
data.frame(c(25,1),colnames <- temp)
temp_test <- data.frame("temp"=25)
predict(mod,temp_test)
class(bike$hour)
bike$hour <- sapply(as.numeric(bike$hour))
bike$hour <- sapply(bike$hour,as.numeric)
class(bike$hour)
count_mod <- lm(formula = count ~ . - casual - registered - datetime - atemp, data = bike)
summary(count_mod)
