data_unassigned <- data_unassigned[order(data_unassigned$first_revenue_date),]
data_unassigned$rev_cumsum <- cumsum(data_unassigned$revenue)
data_assigned <- data_assigned[order(data_assigned$first_revenue_date),]
data_assigned$rev_cumsum <- cumsum(data_assigned$revenue)
plot(dataset$first_revenue_date,dataset$rev_cumsum)
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
<<<<<<< HEAD
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"))
lwd=c(2.5,2.5,col=c("black","blue","red"))
lwd=c(2.5,2.5,2.5,col=c("black","blue","red"))
lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("black","blue","red"))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue")lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("black","blue","red")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("black","blue","red")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("blue","red")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("blue","red")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("blue","red","yellow")))
plot(dataset$first_revenue_date,dataset$rev_cumsum)
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5,col=c("blue","red","yellow")))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5),col=c("blue","red","yellow"))
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5),col=c("black",blue","red"))
#Use linear regression model to assess added revenue by assigning lead
rev_mod <- lm(dataset$revenue~dataset$assigned)
summary(rev_mod)
all_mod <- lm(dataset$revenue~dataset$advertiser_id+dataset$assigned+as.integer(dataset$date_assignment_starts)+as.integer(dataset$date_assignment_ends)+as.integer(dataset$first_revenue_date)+as.integer(dataset$date_created)+dataset$age+dataset$assign_days)
summary(all_mod)
legend(0,100000000000,c("Total cumulative revenue","Unassigned cumulative revenue","Assigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"),lty=c(1,1),
lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
knitr::opts_chunk$set(echo = TRUE)
plot(dataset$first_revenue_date,dataset$rev_cumsum, main="Cumulative revenue by first revenue date")
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"),lty=c(1,1),lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
plot(dataset$first_revenue_date,dataset$rev_cumsum)
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"),lty=c(1,1),lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"),lty=c(1,1),lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"), lty=c(1,1), lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
plot(dataset$first_revenue_date,dataset$rev_cumsum, main="Cumulative revenue by first revenue date",xlab="First Revenue Date", ylab="Cumulative Revenue")
lines(data_unassigned$first_revenue_date,data_unassigned$rev_cumsum, col='red')
lines(data_assigned$first_revenue_date,data_assigned$rev_cumsum, col='blue')
legend(0,100000000000,c("Total cumulative revenue","Assigned cumulative revenue","Unassigned cumulative revenue"), lty=c(1,1), lwd=c(2.5,2.5,2.5), col=c("black","blue","red"))
strptime("11:02:03")
strptime("11:02:03",format="%H:%M:%S")
strptime("January 8, 2017",format"$M,$D,$Y")
strptime("09-08-2017",format"$M,$D,$Y")
strptime("09-08-2017",format=("$M,$D,$Y")
strptime("09-08-2017",format="$M,$D,$Y")
strptime("11:02:03",format="%H:%M:%S")
strptime("09-08-2017",format="$M:$D:$Y")
strptime("09-08-2017",format="$m:$D:$Y")
strptime("09-08-2017",format="$m:$d:$y")
install.packages('dplyr')
install.packages("nycflights13")
library(dplyr)
library(nycflights13)
flights
head(flights)
summary(flights)
help("dplyr")
head(filter(flights,month==11,day==3,carrier=='AA)')
head(filter(flights,month==11,day==3,carrier=='AA)'))
head(filter(flights,month==11,day==3,carrier=='AA'))
slice(flights,1:10)
head(arrange(flights,year,month,day,airtime))
head(arrange(flights,year,month,day,air_time))
head(arrange(flights,year,month,day,arr_time))
head(arrange(flights,year,month,day,desc(arr_time)))
head(select(flights,carrier))
head(select(flights,carrier,arr_time))
select(flights,carrier,arr_time))
select(flights,carrier,arr_time)
head(rename(flights,airline_carrier=carrier))
distinct(select(flights,carriers))
distinct(select(flights,carrier))
mutate(flights,new_col= arr_delay-dep_delay)
transmute(flights,new_col= arr_delay-dep_delay)
summarise(flights,avg_airtime=mean)
summarise(flights,avg_airtime=mean(air_time,na.rm=TRUE))
mean(air_time,na.rm=TRUE))
mean(flights$air_time,na.rm=TRUE))
mean(flights$air_time,na.rm=TRUE)
summarise(flights,total_airtime=sum(air_time,na.rm=TRUE))
sample_n(flights,10)
sample_frac(flights,0.1)
df <- mtcars
result <- arrange(sample_n(filter(df,mpg>20),size=5),desc(mpg))
result
a <- filter(df,mpg>20)
b <- sample_n(a,size=5)
results <- arrange(b,desc(mpg))
result <- df %/% filter(mpg>20) %/% sample_n(size=5) %/% arrange(desc(mpg))
result <- df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
library(ggplot2)
setwd("C:/Users/cwbishop/Documents/GitHub/DataScienceandMachineLearning/Data-Science-and-Machine-Learning-Bootcamp")
train <- read.csv('train.csv')
test<- read.csv('test.csv')
bike <- train
head(bike)
temp_count_plot <- ggplot(data=bike,aes(x=temp,y=count))
temp_count_plot + geom_point(aes(color=temp),alpha=0.3)
bike$datetime <- as.POSIXct(bike$datetime)
date_count_plot <- ggplot(data=bike,aes(x=datetime,y=count))
date_count_plot + geom_point(aes(color=temp),alpha=0.3)
train <- read.csv('train.csv')
test<- read.csv('test.csv')
bike <- train
cor.test(bike$temp,bike$count)
cor(bike$temp,bike$count)
cor(bike$temp,bike$count)
cor.data <- cor(bike$temp,bike$count)
cor.data
cor.data <- cor(bike[temp,count])
cor.data <- cor(bike['temp','count'])
cor.data <- cor(bike[,c('temp','count'])
cor.data
corrplot(temp,count)
cor.data <- cor(bike[,c('temp','count'])
cor.data
corrplot(temp,count)
cor.data <- cor(bike[,c('temp','count']))
bike[,c('temp','count'])
bike[,c('temp','count')]
cor.data <- cor(bike[,c('temp','count')])
cor.data
View(bike)
pl <- ggplot(bike, aes(factor(season), count))
pl + geom_boxplot()
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl + geom_boxplot(fill='white',color=c('red','green','blue','purple'))
pl + geom_boxplot(fill='green',color=c('red','green','blue','purple'))
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl <- ggplot(bike, aes(factor(season), count,fill=group))
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl <- ggplot(bike, aes(factor(season), count,fill=season))
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl <- ggplot(bike, aes(factor(season), count,fill=factor(season))
pl + geom_boxplot(color=c('red','green','blue','purple'))
pl <- ggplot(bike, aes(factor(season), count,fill=factor(season)))
pl + geom_boxplot(color=c('red','green','blue','purple'))
bike$datetime
bike$datetime[4]
bike$datetime[,4]
bike$datetime[4]
bike$datetime
format(time.stamp, "%H")
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
bike <- train
bike$datetime[4]
View(bike)
class(bike$datetime)
bike$datetime[4]
time.stamp <- bike$datetime[4]
format(time.stamp, "%H")
hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H")
hour
bike$datetime <- as.POSIXct(bike$datetime)
hour = format(as.POSIXct(Time,format="%H:%M:%S"),"%H")
hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H")
hour
View(bike)
hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H:%M")
hour
hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H")
hour
bike$hour = format(as.POSIXct(bike$datetime,format="%H:%M:%S"),"%H")
p2 <- ggplot(data=bike,aes(x=hour,y=count))
p2+geom_point(aes(color=temp))
p2+geom_point(aes(color=temp) + scale_colour_gradient(high='red',low = "blue"))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) scale_fill_distiller(palette = "Spectral")
p2+geom_point(aes(color=temp)) +scale_fill_distiller(palette = "Spectral")
+ scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "white")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
library(dplyr)
subset(bike,workingday==0)
not_work_day <- subset(bike,workingday==0)
p2 <- ggplot(data=not_work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
work_day <- subset(bike,workingday==1)
p2 <- ggplot(data=work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "blue")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(colors=c('red','orange','yellow','green','purple','blue')
not_work_day <- subset(bike,workingday==0)
p2 <- ggplot(data=not_work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
p2+geom_point(aes(color=temp)) + scale_colour_gradient(colors=c('red','orange','yellow','green','purple','blue'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('red','orange','yellow','green','purple','blue'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('blue','purple','green','yellow','orange','red'))
work_day <- subset(bike,workingday==1)
p2 <- ggplot(data=work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('blue','purple','green','yellow','orange','red'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('purple','blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c(blue','green','yellow','orange','red'))
not_work_day <- subset(bike,workingday==0)
p2 <- ggplot(data=not_work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp)) + scale_colour_gradient(high='red',low = "yellow")
p2+geom_point(aes(color=temp)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp)+position=position_jitter(w=1, h=0)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp),position=position_jitter(w=1, h=0)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
p2+geom_point(aes(color=temp),position=position_jitter(w=1, h=0)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
p2 <- ggplot(data=work_day,aes(x=hour,y=count))
p2+geom_point(aes(color=temp),position=position_jitter(w=1, h=0)) + scale_colour_gradientn(colors=c('black','blue','green','yellow','orange','red'))
temp.model <- lm(count~temp,data=bike)
summary(temp.model)
temp.model
temp.model.coefficient
temp.model[2]
temp.model[1]
temp.model[1]['temp']
temp.model[1][2]
temp.model[1][1]
class(temp.model[1])
temp.model[1]{1}
temp.model{1}
temp.model[[1][1]
temp.model[[1]][1]
temp.model[[1]][2]
temp.model[[1]][2]*25+temp.model[[1]][1]
bike_25 <- temp.model[[1]][2]*25+temp.model[[1]][1]
bike_25
predict(temp.model,25)
predict(temp.model,newdata=25)
predict(temp.model,newdata=as.data.frame(25)
predict(temp.model,newdata=as.data.frame(25))
?predict
predict(temp.model,newdata=data.frame(25))
predict(temp.model,data.frame(25))
predict(temp.model,data.frame(c(25)))
predict(temp.model,data.frame(c(25,1)))
predict(temp.model, data.frame(train_x = c(1, 2, 3)))
temp.model <- lm(count~temp,data=bike)
predict(temp.model, data.frame(train_x = c(1, 2, 3)))
summary(temp.model)
bike_25 <- temp.model[[1]][2]*25+temp.model[[1]][1]
predict(temp.model,data.frame(c(25,1)))
predict(temp.model, data.frame(train_x = c(1, 2, 3)))
mod <- temp.model
predict(mod,data.frame(c(25,1)))
data.frame(c(25,1))
data.frame(c(25,1),colnames <- temp)
temp_test <- data.frame("temp"=25)
predict(mod,temp_test)
class(bike$hour)
bike$hour <- sapply(as.numeric(bike$hour))
bike$hour <- sapply(bike$hour,as.numeric)
class(bike$hour)
count_mod <- lm(formula = count ~ . - casual - registered - datetime - atemp, data = bike)
summary(count_mod)
=======
Sys.Date()
today <- Sys.Date()
class(today)
today <- Sys.Date()
class(today)
c <- "1900-01-01"
class(c)
my.date <- as.Date(c)
class(my.date)
my.date <- as.Date("Nov-03-90",format="%b-%d-%y")
as.Date("June,01,2002",format="%B,%d,%Y")
as.POSIXct("11:02:03",format="%H:%M:%S")
?strptime
install.packages(dplyr)
install.packages('dplyr)
install.packages('dplyr')
head(mtcars)
slice(mtcars,mpg>20,cyl==6)
library(dplyr)
slice(mtcars,mpg>20,cyl==6)
slice(mtcars,mpg>20&cyl==6)
mtcars
slice(mtcars,mpg>10&cyl==6)
slice(mtcars,mpg>10&cyl==4)
a <- slice(mtcars,mpg>10 & cyl==4)
filter(mtcars,mpg>10 & cyl==4)
filter(mtcars,mpg>20 & cyl==6)
arrange(mtcars,cyl,wt)
arrange(mtcars,cyl,desc(wt)
arrange(mtcars,cyl,desc(wt))
)
arrange(mtcars,cyl,desc(wt))
select(mtcars,mpg,hp)
distinct(mtcars,gears)
distinct(mtcars,gear)
select(distinct(mtcars,gear),gear)
mutate(mtcars,Performance=hp/wt)
summarise(mtcars,avg_mpg=mean(mpg,na.rm=TRUE))
mtcars%>%filter(mtcars,cyl=6) %>% mean(hp)
mtcars%>%filter(cyl=6) %>% mean(hp)
results <- mtcars
results%>%filter(cyl=6) %>% mean(hp)
df <- results%>%filter(cyl=6) %>% mean(hp)
df <- results %>% filter(cyl=6) %>% mean(hp)
df <- results %>% filter(cyl==6) %>% mean(hp)
df <- results %>% filter(cyl==6) %>% mean(hp,na.rm=TRUE)
mean(result$hp,na.rm=TRUE)
mean(mtcars$hp,na.rm=TRUE)
df <- mtcars
result <- df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
results <- mtcars
df <- results %>% filter(cyl==6) %>% mean(hp,na.rm=TRUE)
df <- results %>% filter(cyl==6)
View(df)
df <- results %>% filter(cyl==6) %>% mean(hp)
df <- results %>% filter(cyl==6) %>% arrange(hp)
View(df)
class(result)
class(result$hp)
mean(result$hp)
mean(df$hp)
df <- results %>% filter(cyl==6) %>% summarise(mean_hp=mean(hp,na.rm=TRUE)
df <- results %>% filter(cyl==6) %>% arrange(hp)
df <- results %>% filter(cyl==6) %>% summarise(mean_hp=mean(hp,na.rm=TRUE))
View(df)
filter(mtcars,mpg>20, cyl==6)
mtcars %>% distinct(gear)%>% select(gear)
mtcars %>% distinct(gear)
install.packages('tidyr')
library(tidyr)
install.packages('data.table')
library(data.table)
library(tidyr)
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998,1999,2000,1998,1999,2000,1998,1999,2000)
q1 <- runif(9,min=0, max=100)
q2 <- runif(9,min=0, max=100)
q3 <- runif(9,min=0, max=100)
q4 <- runif(9,min=0, max=100)
runif(10)
?runif
plot(runif(100))
plot(runif(1000))
plot(punif(1000))
punif(10)
punif(10,min=0,max=1)
punif(c(1,2,3),min=0,max=1)
dunif(c(1,2,3),min=0,max=1)
df
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
df
gather(df,Quarter,Revenue,Qtr1:Qtr4)
gather(df,Quarter,Revenue,Qtr1:Qtr3)
?tidyr
df %>% gather(Quarter, Revenue,Qtr1:Qtr4)
stocks <- data.frame(
time=as.Date('2009-01-01')+0:9,
X=rnorm(10,0,1),
Y=rnorm(10,0,2),
Z=rnorm(10,0,4)
)
stocks
rnorm(10)
plot(rnorm(100)
)
plot(rnorm(1000)
)
plot(rnorm(1000,0,1)
)
plot(norm(1000,0,1))
?rnorm
plot(dnorm(1000,0,1))
plot(dnorm(1000,mean=1,sd=1))
x<-rnorm(100000,mean=10, sd=2)
hist(x,breaks=150,xlim=c(0,20),freq=FALSE)
abline(v=10, lwd=5)
abline(v=c(4,6,8,12,14,16), lwd=3,lty=3)
time
stocks$time
1+1:10
stocks.gathered <- stocks %>% gather(stock,price,X,Y,Z)
stocks.gathered
stocks.gathered %>% spread(stock,price,X,Y,Z)
stocks.gathered %>% spread(stock,price)
stocks.gathered %>% spread(stock,time)
stocks.gathered %>% spread(stock,time,price)
stocks.gathered %>% spread(time,price)
df <- data.frame(new.col=c(NA,"a.x","b.y","c.z"))
df
seperate(df,new.col,c('ABC','XYZ'))
separate(df,new.col,c('ABC','XYZ'))
df <- data.frame(new.col=c(NA,"a-x","b-y","c-z"))
separate(data=df,col=new.col,into=c('abc','xyz'),sep='-')
df.sep <- separate(data=df,col=new.col,into=c('abc','xyz'),sep='-')
unite(df.sep,new.joined.col,abc,xyz)
unite(df.sep,new.joined.col,abc,xyz,sep=.)
unite(df.sep,new.joined.col,abc,xyz,sep='.')
unite(df.sep,new.joined.col,abc,xyz,sep='...')
read.csv('C:/Users/ML/Dropbox/Work/Data-learn/R-for-Data-Science-and-Machine-Learning/Machine Learning with R')
read.csv('C:/Users/ML/Dropbox/Work/Data-learn/R-for-Data-Science-and-Machine-Learning/Machine Learning with R/student-mat.csv')
df <- read.csv('C:/Users/ML/Dropbox/Work/Data-learn/R-for-Data-Science-and-Machine-Learning/Machine Learning with R/student-mat.csv')
View(df)
head(df)
df <- read.csv('C:/Users/ML/Dropbox/Work/Data-learn/R-for-Data-Science-and-Machine-Learning/Machine Learning with R/student-mat.csv',sep=';')
head(df)
summary(df)
any(is.na(df))
str(df)
library(ggplot2)
library(ggthemes)
library(dplyer)
install.packages('ggthemes')
library(ggplot2)
library(ggthemes)
library(dplyr)
num.cols <- sapply(df,is.numeric)
?sapply
cor.data <- cor(df[,num.cols])
print(cor.data)
num.cols
is.numeric(df)
is.numeric(df$school)
is.numeric(df$age)
is.factor(df$school)
is.factor(df$age)
install.packages('corrgram')
install.packages('corrplot')
library(corrgram)
library(corrplot)
print(corrplot(cor.data))
print(corrplot(cor.data,method='color'))
corrgram(df)
?corrgram
corrgram(df,order=TRUE,lower.panel=panel.shade,upper.panel=panel.pie, test.panel=panel.txt)
ggplot(df,aes(x=G3))
ggplot(df,aes(x=G3))+geom_histogram(bins=20,alpha=0.5,fill='blue'
ggplot(df,aes(x=G3))+geom_histogram(bins=20,alpha=0.5,fill='blue')
ggplot(df,aes(x=G3))+geom_histogram(bins=20,alpha=0.5,fill='blue'))
ggplot(df,aes(x=G3)+geom_histogram(bins=20,alpha=0.5,fill='blue'))
ggplot(df,aes(x=G3))+geom_histogram(bins=20,alpha=0.5,fill='blue')
install.packages('caTools')
install.packages("caTools")
library(caTools)
sample <- sample.split(df$G3)
sample
sample <- sample.split(df$G3,SplitRatio=0.7)
sample
train <- subset(df,sample)
train <- subset(df,sample==TRUE)
test <- subset(df,sample==FALSE)
View(test)
model <- lm(g3~.,train)
model <- lm(G3~.,train)
summary(model)
set.seed(101)
sample <- sample.split(df$G3,SplitRatio=0.7)
train <- subset(df,sample==TRUE)
test <- subset(df,sample==FALSE)
model <- lm(G3~.,train)
summary(model)
res <- residuals(model)
class(res)
res
res <- as.data.frame(res)
head(res)
ggplot(res,aes(res))+geom_histogram(fill='blue',alpha=0.5)
library(ggplot2)
ggplot(res,aes(res))+geom_histogram(fill='blue',alpha=0.5)
plot(model)
G3.predictions <- predict(model,test)
results <- cbind(G3.predictions,test$G3)
colnames(results) <- c('predicted','actual')
results <- as.data.frame(results)
results
to_zero <- function(x){
if (x<0){
return(0)
}else{
return(x)
}
}
results$predicted <- sapply(results$predicted,to_zero)
mse <- mean((results$actual-results$predicted)^2)
mse
mse^0.5
SSE <- sum((results$predicted-results$actual)^2)
SSE <- sum((results$predicted-results$actual)^2)
SST <- sum((mean(df$G3)-results$actual)^2)
R2 <- 1-SSE/SST
R2
getwd()
setwd("~/Data-Science-and-Machine-Learning-Bootcamp")
getwd()
setwd("C:/Users/ML/Documents/Data-Science-and-Machine-Learning-Bootcamp")
train <- read.csv('train.csv')
test <- read.csv('test.csv')
train <- read.csv('train.csv')
test <- read.csv('test.csv')
View(train)
View(test)
head(train)
>>>>>>> origin/master
